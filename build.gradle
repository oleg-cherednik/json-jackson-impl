buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'java-library'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'io.freefair.lombok' version '8.4'

    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group 'ru.oleg-cherednik.json'
version '3.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked']
}

configurations {
    jar.archiveFileName = "${rootProject.name}-${version}.jar"
}

checkstyle {
    toolVersion = '10.10.0'
    configFile = "${projectDir}/misc/checkstyle/checkstyle.xml" as File
    ignoreFailures = true
    maxWarnings = 0
    maxErrors = 0
}

pmd {
    toolVersion = '6.21.0'
    consoleOutput = true
    rulesMinimumPriority = 5
    ignoreFailures = true
    ruleSets = [
            "${projectDir}/misc/pmd/bestpractices.xml",
            "${projectDir}/misc/pmd/codestyle.xml",
            "${projectDir}/misc/pmd/design.xml",
            "${projectDir}/misc/pmd/errorprone.xml",
            "${projectDir}/misc/pmd/multithreading.xml",
            "${projectDir}/misc/pmd/performance.xml",
            "${projectDir}/misc/pmd/security.xml"
    ]
}

checkstyleMain {
    enabled = true
    source = 'src/main/java'
}

checkstyleTest {
    enabled = true
    source = 'src/test/java'
}

pmdMain {
    enabled = true
    source = 'src/main/java'
}

pmdTest {
    enabled = true
    source = 'src/test/java'
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${property('lombok.version')}"

    api 'ru.oleg-cherednik.json:json-api:3.0.0'

    compileOnly "com.fasterxml.jackson.core:jackson-databind:${property('jackson.version')}"
    compileOnly "com.fasterxml.jackson.module:jackson-module-afterburner:${property('jackson.version')}"
    compileOnly "com.fasterxml.jackson.module:jackson-module-parameter-names:${property('jackson.version')}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${property('jackson.version')}"
    compileOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${property('jackson.version')}"

    testAnnotationProcessor "org.projectlombok:lombok:${property('lombok.version')}"

    testImplementation('org.testng:testng:7.5.1') {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.apache.ant', module: 'ant'
    }

    testImplementation "com.fasterxml.jackson.core:jackson-databind:${property('jackson.version')}"
    testImplementation "com.fasterxml.jackson.module:jackson-module-afterburner:${property('jackson.version')}"
    testImplementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${property('jackson.version')}"
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${property('jackson.version')}"
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${property('jackson.version')}"

    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'commons-io:commons-io:2.15.0'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

test {
    useTestNG()
}

license {
    header rootProject.file('APACHE.txt')
    include '**/*.java'
}

signing {
    sign publishing.publications
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = rootProject.name

                description = "\n" +
                        "    Jackson usability utilities.\n" +
                        "    It's designed to add additional features like easy and centralized configuration,\n" +
                        "    builder or static method set.\n" +
                        "  "

                url = 'https://github.com/oleg-cherednik/json-jackson-impl'
                inceptionYear = '2020'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'oleg.cherednik'
                        name = 'Oleg Cherednik'
                        email = 'oleg.cherednik@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/oleg-cherednik/json-jackson-impl'
                    connection = 'scm:https://github.com/oleg-cherednik/json-jackson-impl.git'
                    developerConnection = 'scm:git@github.com:oleg-cherednik/json-jackson-impl.git'
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}
